package _2023

import (
	"fmt"
	"math"
	"strconv"

	util "github.com/byorn/advent_of_code/util"
)

func Day11(inputFile string) (int, int) {
	inputText := util.ReadFile(inputFile)
	fmt.Printf("%d \n", len(inputText))
	return day11Part1(inputText), day11Part2(inputText)
}

func day11Part1(input []string) int {
	var universe [][]string
	for _, line := range input {

		var universeRow []string
		for _, lineVal := range line {
			universeRow = append(universeRow, string(lineVal))
		}
		universe = append(universe, universeRow)
	}
	universe = expandUniverse(universe, 1)
	universe, _, totalNumOfGalaxies := numberTheGalaxies(universe)
	galaxyCombinations := util.GetCombinations(totalNumOfGalaxies, 2)
	printUniverse(universe)
	return calculateSteps(universe, galaxyCombinations)
}

//// Function to check if two 2D string arrays are equal
//func areEqual(a, b [][]string) bool {
//	// Check if the number of rows is the same
//	if len(a) != len(b) {
//		return false
//	}
//
//	// Check each row
//	for i := range a {
//		// Check if the number of columns is the same
//		if len(a[i]) != len(b[i]) {
//			fmt.Printf("\n \n length is not same %v %v", len(a[i]), len(b[i]))
//			return false
//		}
//
//		// Check each element in the row
//		for j := range a[i] {
//			if a[i][j] != b[i][j] {
//				fmt.Printf("\n \n value is not same %v %v", a[i][j], b[i][j])
//				return false
//			}
//		}
//	}
//
//	return true
//}
//
//func find(universe [][]string) int {
//
//
//
//	isEq := areEqual(u1, universe)
//	fmt.Printf("\n \n Is EQUAL %v", isEq)
//	count := util.ShortestPath(universe, "1", "4")
//	fmt.Printf("count %d", count)
//	return count
//}

func calculateStepsPart2(universe [][]string, comb [][]int, rows_having_no_galaxy, cols_having_no_galaxy []int) int {
	total := 0

	for _, i := range comb {
		from := strconv.Itoa(i[0])
		to := strconv.Itoa(i[1])
		fromPoint := util.FindPoint(universe, from)
		toPoint := util.FindPoint(universe, to)

		rowsToExpand_from := util.Filter(rows_having_no_galaxy, func(v int) bool {
			return v < fromPoint.Row
		})
		colsToExpand_from := util.Filter(cols_having_no_galaxy, func(v int) bool {
			return v < fromPoint.Col
		})
		rowsToExpand_to := util.Filter(rows_having_no_galaxy, func(v int) bool {
			return v < toPoint.Row
		})
		colsToExpand_to := util.Filter(cols_having_no_galaxy, func(v int) bool {
			return v < toPoint.Col
		})

		fmt.Printf("\n from %s", from)
		fmt.Printf("\n rows to expand %v cols to expand %v", rows_having_no_galaxy, cols_having_no_galaxy)
		fromPoint.Row += (len(rowsToExpand_from)*10 + 2)
		fromPoint.Col += (len(colsToExpand_from)*10 + 2)
		toPoint.Row += (len(rowsToExpand_to)*10 + 2)
		toPoint.Col += (len(colsToExpand_to)*10 + 2)

		fmt.Printf("\n from Row: %d Col %d", fromPoint.Row, fromPoint.Col)
		steps := int(math.Abs(float64(fromPoint.Row-toPoint.Row)) + math.Abs(float64(fromPoint.Col-toPoint.Col)))
		//    steps := util.CalculateDistance(universe, from, to)
		total += steps
	}
	return total
}

func calculateSteps(universe [][]string, comb [][]int) int {
	total := 0

	for _, i := range comb {
		from := strconv.Itoa(i[0])
		to := strconv.Itoa(i[1])
		steps := util.CalculateDistance(universe, from, to)
		total += steps
	}
	return total
}

func expandUniverse(universe [][]string, expandBy int) [][]string {
	universe = expandRows(universe, expandBy)
	universe = expandCols(universe, expandBy)
	return universe
}

func printUniverse(universe [][]string) {
	for _, r := range universe {
		fmt.Println(r)
	}
}

func numberTheGalaxies(universe [][]string) ([][]string, map[string]string, int) {
	galaxyLocations := map[string]string{}
	galaxyIndex := 1
	for rowIndex, r := range universe {
		for colIndex, cv := range r {
			if cv == "#" {
				universe[rowIndex][colIndex] = strconv.Itoa(galaxyIndex)
				galaxyLocations[strconv.Itoa(galaxyIndex)] = strconv.Itoa(rowIndex) + " " + strconv.Itoa(colIndex)
				galaxyIndex++
			}
		}
	}
	return universe, galaxyLocations, galaxyIndex - 1
}

func getColIndexesToExpand(universe [][]string) []int {
	var colIndexesToExpand []int
	for colIndex := range universe[0] {

		colHasHash := false
		for rowIndex := range universe {
			if universe[rowIndex][colIndex] == "#" {
				colHasHash = true
			}
		}
		if !colHasHash {
			colIndexesToExpand = append(colIndexesToExpand, colIndex)
		}

	}

	return colIndexesToExpand
}

func expandCols(universe [][]string, part2Num int) [][]string {
	colIndexesToExpand := getColIndexesToExpand(universe)
	for i, row := range universe {

		afterInserting := 0
		for _, colIndex := range colIndexesToExpand {
			for j := 0; j < part2Num; j++ {
				row = util.InsertStringToIndex(row, colIndex+afterInserting, row[colIndex+afterInserting])
				universe[i] = row
				afterInserting++
			}
		}
	}
	return universe
}

func getRowIndexesToExpand(universe [][]string) []int {
	rowsTocopy := []int{}

	for index, r := range universe {
		rowHasHash := false
		for _, c := range r {
			if c == "#" {
				rowHasHash = true
			} else {
			}
		}
		if !rowHasHash {
			rowsTocopy = append(rowsTocopy, index)
		}
	}
	return rowsTocopy
}

func expandRows(universe [][]string, part2Num int) [][]string {
	afterInserting := 0
	rowsTocopy := getRowIndexesToExpand(universe)
	for _, rowIndexToCopy := range rowsTocopy {
		rowToCopy := universe[rowIndexToCopy+afterInserting]
		for j := 0; j < part2Num; j++ {
			universe = util.InsertStringArrayToIndex(universe, rowIndexToCopy+afterInserting, rowToCopy)
			afterInserting++
		}
	}
	return universe
}

func day11Part2(input []string) int {
	var universe [][]string
	for _, line := range input {

		var universeRow []string
		for _, lineVal := range line {
			universeRow = append(universeRow, string(lineVal))
		}
		universe = append(universe, universeRow)
	}
	rowsToExapand := getRowIndexesToExpand(universe)
	colsToExpand := getColIndexesToExpand(universe)
	universe, _, totalNumOfGalaxies := numberTheGalaxies(universe)
	galaxyCombinations := util.GetCombinations(totalNumOfGalaxies, 2)

	printUniverse(universe)
	return calculateStepsPart2(universe, galaxyCombinations, rowsToExapand, colsToExpand)
	// fmt.Println(input)
}
